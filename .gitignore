<!DOCTYPE html>
<html>
<head>
    <title>Roche limit</title>
    <meta charset="UTF-8"/>
    <meta name="viewport" content="initial-scale=1, width=device-width"/>
</head>
    <body style="margin: 0; overflow: hidden;">
        <canvas id="canvas"></canvas>
        <script>
var width  = window.innerWidth,
    height = window.innerHeight,
    ratio  = window.devicePixelRatio;
// TOUTES LES VALEURS QUE TU PEUX MODIFIER
var dt = 1,     // vitesse de la simulation, plus rapide -> beaucoup moins stable et précis
    G = 1,      // constante de Gravitation
    M = parseFloat(prompt("Planet mass :",           500          ), 10),    // Masse de la planète
    R = 50,     // Rayon de la planète
    m = parseFloat(prompt("Satellite mass :",        5            ), 10),    // Masse totale du satellite
    r = 20,     // Rayon du satellite
    d = 200,    // Distance entre le satellite et la planète
    n = parseFloat(prompt("Number of rocks :",       700          ), 10),    // Nombre approximatif de particules
    
    
    
    
    
    
    
    
    
    
    
    
    mi = m/n, // mass rock
    ri = r/Math.sqrt(n), // radius rock
    riDraw = ri * 1.5,
    X = width/2,
    Y = height/2,
    rocks = [];
var canvas  = document.getElementById("canvas"),
    context = canvas.getContext("2d");
canvas.width  = width  * ratio;
canvas.height = height * ratio;
canvas.style.width  = width  + "px";
canvas.style.height = height + "px";
context.scale(ratio, ratio);
function Rock(x, y, vx, vy) {
    this.x = x;
    this.y = y;
    this.vx = vx;
    this.vy = vy;
    this.ax = 0;
    this.ay = 0;
}
Rock.prototype = {
    update: function() {
        this.vx += this.ax * dt;
        this.vy += this.ay * dt;
        this.x += this.vx * dt;
        this.y += this.vy * dt;
        this.ax = 0;
        this.ay = 0;
        this.attractToPlanet();
    },
    
    attractToPlanet: function() {
        var dx = this.x - X,
            dy = this.y - Y,
            dr2 = dx*dx + dy*dy,
            dr = Math.sqrt(dr2),
            ex = dx/dr,
            ey = dy/dr,
            p = ri + R - dr;
        
        if (p > 0) {
            var vn = this.vx * ex + this.vy * ey;
            if (vn < 0) {
                this.vx -= vn*ex;
                this.vy -= vn*ey;
            }
            this.x += p*ex;
            this.y += p*ey;
            
            dr = ri + R;
            dr2 = dr*dr;
        }
        
        var a = -G*M/dr2;
        this.ax += a*ex;
        this.ay += a*ey;
    },
    
    interactRock: function(rock) {
        var dx = this.x - rock.x,
            dy = this.y - rock.y,
            dr2 = dx*dx + dy*dy,
            dr = Math.sqrt(dr2),
            ex = dx/dr,
            ey = dy/dr,
            p = 2*ri - dr;
        
        if (p > 0) {
            var vn = (this.vx - rock.vx) * ex + (this.vy - rock.vy) * ey;
            if (vn < 0) {
                this.vx -= vn*ex;
                this.vy -= vn*ey;
                rock.vx += vn*ex;
                rock.vy += vn*ey;
            }
            
            this.x += p/2 * ex;
            this.y += p/2 * ey;
            rock.x -= p/2 * ex;
            rock.y -= p/2 * ey;
            
            dr = 2*ri;
            dr2 = dr*dr;
        }
        
        var a = -G*mi/dr2;
        this.ax +=  a*ex;
        this.ay +=  a*ey;
        rock.ax += -a*ex;
        rock.ay += -a*ey;
    },
    
    draw: function() {
        context.beginPath();
        context.arc(this.x, this.y, riDraw, 0, 2*Math.PI);
        context.fill();
    }
};
function animate() {
    draw();
    update();
    requestAnimationFrame(animate);
}
function draw() {
    context.fillStyle = "#000";
    context.fillRect(0, 0, width, height);
    
    context.fillStyle = "#fff";
    context.beginPath();
    context.arc(X, Y, R, 0, 2*Math.PI);
    context.fill();
    
    for (let i in rocks) {
        rocks[i].draw();
    }
}
function update() {
    for (let i in rocks) {
        rocks[i].update();
    }
    
    for (let i = 0, r1; i < rocks.length; i++) {
        r1 = rocks[i];
        for (let j = i+1, r2; j < rocks.length; j++) {
            r2 = rocks[j];
            r1.interactRock(r2);
        }
    }
}
var x0 = X + d,
    y0 = Y,
    di = 2*ri,
    dj = 2*Math.sqrt(3)*ri,
    imin = x0 - r,
    imax = x0 + r + ri,
    jmin = y0 - r,
    jmax = y0 + r - Math.sqrt(3)*ri;
for (let i = imin, x1, x2; i <= imax; i += di) {
    x1 = i;
    x2 = i - ri;
    for (let j = jmin, y1, y2, dx, dy, dr2, dr, vx, vy; j <= jmax; j += dj) {
        y1 = j;
        y2 = j + Math.sqrt(3)*ri;
        
        dx = x1 - x0;
        dy = y1 - y0;
        dr2 = dx*dx + dy*dy;
        dr = Math.sqrt(dr2);
        if (dr < r) {
            dx = x1 - X;
            dy = y1 - Y;
            dr2 = dx*dx + dy*dy;
            dr = Math.sqrt(dr2);
            vx = 0;
            vy = -Math.sqrt(M*G/dr);
            rocks.push(new Rock(x1, y1, vx, vy));
        }
        
        dx = x2 - x0;
        dy = y2 - y0;
        dr2 = dx*dx + dy*dy;
        dr = Math.sqrt(dr2);
        if (dr < r) {
            dx = x2 - X;
            dy = y2 - Y;
            dr2 = dx*dx + dy*dy;
            dr = Math.sqrt(dr2);
            vx = 0;
            vy = -Math.sqrt(M*G/dr);
            rocks.push(new Rock(x2, y2, vx, vy));
        }
    }
}
animate();
        </script>
    </body>
</html>
